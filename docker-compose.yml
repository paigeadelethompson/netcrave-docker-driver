version: '3.8'

services:
  ca:
    image: paigeadele/compose-certificate-roller
    command:
      - /bin/sh 
      - -c 
      - |
        easyrsa init-pki
        easyrsa build-ca nopass
        cp -r /etc/ssl/* /certificatemgr
        cp -r /etc/ssl/* /davfs
        cp -r /etc/ssl/* /haproxy
        cp -r /etc/ssl/* /acme
        cp -r /etc/ssl/* /squid
        cp -r /etc/ssl/* /fluent
        cp -r /etc/ssl/* /icap
        cp -r /etc/ssl/* /haproxycfg
        cp -r /etc/ssl/* /ipam
        cp -r /etc/ssl/* /ifconfig
        cp -r /etc/ssl/* /powerdns
        cp /ca/private/ca.crt /certificatemgr/certs
        cp /ca/private/ca.crt /davfs/certs
        cp /ca/private/ca.crt /haproxy/certs
        cp /ca/private/ca.crt /acme/certs
        cp /ca/private/ca.crt /squid/certs
        cp /ca/private/ca.crt /icap/certs
        cp /ca/private/ca.crt /haproxycfg/certs
        cp /ca/private/ca.crt /powerdns/certs
        easyrsa gen-req certificatemgr nopass
        easyrsa gen-req davfs nopass
        easyrsa gen-req haproxy nopass
        easyrsa gen-req acme nopass
        easyrsa gen-req squid nopass
        easyrsa gen-req fluent nopass
        easyrsa gen-req icap nopass
        easyrsa gen-req haproxycfg nopass     
        easyrsa gen-req powerdns nopass     
        easyrsa sign-req server certificatemgr nopass
        easyrsa sign-req client davfs nopass
        easyrsa sign-req server haproxy nopass
        easyrsa sign-req server acme nopass
        easyrsa sign-req server squid nopass
        easyrsa sign-req server fluent nopass
        easyrsa sign-req server icap nopass
        easyrsa sign-req server haproxycfg nopass
        easyrsa sign-req server powerdns nopass
        cp /ca/private/issued/certificatemgr.crt /certificatemgr/
        cp /ca/private/issued/davfs.crt /davfs/
        cp /ca/private/issued/haproxy.crt /haproxy/
        cp /ca/private/issued/acme.crt /acme/
        cp /ca/private/issued/squid.crt /squid/
        cp /ca/private/issued/fluent.crt /fluent/
        cp /ca/private/issued/icap.crt /icap/
        cp /ca/private/issued/haproxycfg.crt /haproxycfg/             
        cp /ca/private/issued/powerdns.crt /powerdns/                
        cp /ca/private/private/certificatemgr.key /certificatemgr/
        cp /ca/private/private/davfs.key /davfs/
        cp /ca/private/private/haproxy.key /haproxy/
        cp /ca/private/private/acme.key /acme/
        cp /ca/private/private/squid.key /squid/
        cp /ca/private/private/fluent.key /fluent/
        cp /ca/private/private/icap.key /icap/
        cp /ca/private/private/haproxycfg.key /haproxycfg/
        cp /ca/private/issued/powerdns.crt /powerdns/                
        cat /haproxy/haproxy.key > /haproxy/crt_and_key.pem
        cat /haproxy/haproxy.crt >> /haproxy/crt_and_key.pem
        cat /squid/squid.key > /squid/crt_and_key.pem 
        cat /squid/squid.crt >> /squid/crt_and_key.pem
    volumes:
      - ca_easyrsa:/ca/private
      - ipam_ssl:/ipam
      - ifconfig_ssl:/ifconfig
      - certificatemgr_ssl:/certificatemgr
      - davfs_ssl:/davfs
      - haproxy_ssl:/haproxy
      - acme_ssl:/acme
      - squid_ssl:/squid
      - fluent_ssl:/fluent
      - icap_ssl:/icap
      - haproxycfg_ssl:/haproxycfg
      - powerdns_ssl:/powerdns
  cockroach-ca:
    depends_on:
        ca:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-ca --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-client-ca:
    depends_on:
        cockroach-ca:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client-ca --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key --allow-ca-key-reuse
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-tenant-client-ca:
    depends_on:
        cockroach-client-ca:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-tenant-client-ca --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key --allow-ca-key-reuse
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-node:
    depends_on:
        cockroach-tenant-client-ca:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-node --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key \
            localhost 127.0.0.1 *.local ${COCKROACH_IP6} ${COCKROACH_IP4}
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-root:
    depends_on:
        cockroach-node:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key root
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-ipam:
    depends_on:
        cockroach-root:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key ipam
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-ifconfig:
    depends_on:
        cockroach-ipam:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key ifconfig
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-dnsd:
    depends_on:
        cockroach-ifconfig:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key dnsd
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-certificatemgr:
    depends_on:
        cockroach-dnsd:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key certificatemgr
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-powerdns:
    depends_on:
        cockroach-certificatemgr:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            cert create-client --certs-dir /cockroach/certs --ca-key /cockroach/certs/ca.key powerdns
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-copy-certs:
    depends_on:
        cockroach-powerdns:        
            condition: service_completed_successfully  
    image: debian
    command: 
        - /bin/sh
        - -c 
        - |
            cp /cockroach/certs/client.ipam.* /ipam ; cp /cockroach/certs/ca.crt /ipam/crdb.ca.crt
            cp /cockroach/certs/client.ifconfig.* /ifconfig ; cp /cockroach/certs/ca.crt /ifconfig/crdb.ca.crt
            cp /cockroach/certs/client.powerdns.* /powerdns ; cp /cockroach/certs/ca.crt /powerdns/crdb.ca.crt
    volumes:
        - ipam_ssl:/ipam
        - ifconfig_ssl:/ifconfig
        - certificatemgr_ssl:/certificatemgr
        - haproxy_ssl:/haproxy
        - icap_ssl:/icap
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
        - powerdns_ssl:/powerdns
  cockroach:
    depends_on:
        cockroach-copy-certs:        
            condition: service_completed_successfully  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: "start-single-node --certs-dir /cockroach/certs --listen-addr=:26257"
    networks:
      netcrave-docker-driver-cockroach:
        ipv4_address: ${COCKROACH_IP4}
        ipv6_address: ${COCKROACH_IP6}
    volumes:
        - crdb:/cockroach/cockroach-data
        - crdb_ssl:/cockroach/certs
  cockroach-databases:
    volumes:
        - crdb_ssl:/cockroach/certs
    network_mode: host
    depends_on:
        cockroach:        
            condition: service_started  
    image: netcrave:cockroach
    build:
      context: .
      dockerfile: ./docker/cockroach/Dockerfile
    command: |
            sql --certs-dir /cockroach/certs --host=${COCKROACH_IP4} -e "
            CREATE USER ipam WITH PASSWORD NULL;
            CREATE USER ifconfig WITH PASSWORD NULL;
            CREATE USER powerdns WITH PASSWORD NULL;
            CREATE DATABASE IF NOT EXISTS ipam;
            CREATE DATABASE IF NOT EXISTS ifconfig;
            CREATE DATABASE IF NOT EXISTS powerdns;
            GRANT ALL ON DATABASE ipam to ipam;
            GRANT ALL ON DATABASE ifconfig to ifconfig;
            GRANT ALL ON DATABASE powerdns to powerdns;
            CREATE TABLE domains (
            id                    BIGSERIAL PRIMARY KEY,
            name                  VARCHAR(255) NOT NULL,
            master                VARCHAR(128) DEFAULT NULL,
            last_check            INT DEFAULT NULL,
            type                  TEXT NOT NULL,
            notified_serial       BIGINT DEFAULT NULL,
            account               VARCHAR(40) DEFAULT NULL,
            options               TEXT DEFAULT NULL,
            catalog               TEXT DEFAULT NULL,
            CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE UNIQUE INDEX name_index ON domains(name);
            CREATE INDEX catalog_idx ON domains(catalog);
            CREATE TABLE records (
            id                    BIGSERIAL PRIMARY KEY,
            domain_id             INT DEFAULT NULL,
            name                  VARCHAR(255) DEFAULT NULL,
            type                  VARCHAR(10) DEFAULT NULL,
            content               VARCHAR(65535) DEFAULT NULL,
            ttl                   INT DEFAULT NULL,
            prio                  INT DEFAULT NULL,
            disabled              BOOL DEFAULT 'f',
            ordername             VARCHAR(255),
            auth                  BOOL DEFAULT 't',
            CONSTRAINT domain_exists
            FOREIGN KEY(domain_id) REFERENCES domains(id)
            ON DELETE CASCADE,
            CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE INDEX rec_name_index ON records(name);
            CREATE INDEX nametype_index ON records(name,type);
            CREATE INDEX domain_id ON records(domain_id);
            CREATE TABLE supermasters (
            ip                    INET NOT NULL,
            nameserver            VARCHAR(255) NOT NULL,
            account               VARCHAR(40) NOT NULL,
            PRIMARY KEY(ip, nameserver)
            );
            CREATE TABLE comments (
            id                    BIGSERIAL PRIMARY KEY,
            domain_id             INT NOT NULL,
            name                  VARCHAR(255) NOT NULL,
            type                  VARCHAR(10) NOT NULL,
            modified_at           INT NOT NULL,
            account               VARCHAR(40) DEFAULT NULL,
            comment               VARCHAR(65535) NOT NULL,
            CONSTRAINT domain_exists
            FOREIGN KEY(domain_id) REFERENCES domains(id)
            ON DELETE CASCADE,
            CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE INDEX comments_domain_id_idx ON comments (domain_id);
            CREATE INDEX comments_name_type_idx ON comments (name, type);
            CREATE INDEX comments_order_idx ON comments (domain_id, modified_at);
            CREATE TABLE domainmetadata (
            id                    BIGSERIAL PRIMARY KEY,
            domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
            kind                  VARCHAR(32),
            content               TEXT
            );
            CREATE INDEX domainidmetaindex ON domainmetadata(domain_id);
            CREATE TABLE cryptokeys (
            id                    BIGSERIAL PRIMARY KEY,
            domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
            flags                 INT NOT NULL,
            active                BOOL,
            published             BOOL DEFAULT TRUE,
            content               TEXT
            );
            CREATE INDEX domainidindex ON cryptokeys(domain_id);
            CREATE TABLE tsigkeys (
            id                    BIGSERIAL PRIMARY KEY,
            name                  VARCHAR(255),
            algorithm             VARCHAR(50),
            secret                VARCHAR(255),
            CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
            );
            CREATE UNIQUE INDEX namealgoindex ON tsigkeys(name, algorithm);
            CREATE SEQUENCE domain_id MAXVALUE 2147483648;
            CREATE SEQUENCE record_id MAXVALUE 2147483648;
            CREATE SEQUENCE comment_id MAXVALUE 2147483648;
            CREATE SEQUENCE meta_id MAXVALUE 2147483648;
            CREATE SEQUENCE key_id MAXVALUE 2147483648;
            CREATE SEQUENCE tsig_id MAXVALUE 2147483648;"
  netcrave-image:
    image: netcrave
    build:
      context: .
      args:
        DEBIAN_RELEASE: ${DEBIAN_RELEASE}
      dockerfile: ./docker/netcrave/Dockerfile
  netcrave-docker-image:
    depends_on:
        netcrave-image:        
            condition: service_completed_successfully
    image: netcrave:docker
    build:
      context: .
      dockerfile: ./docker/netcrave-docker/Dockerfile
  ipam:
    depends_on:
        netcrave-docker-image:        
            condition: service_completed_successfully
    image: netcrave:ipam
    build:
      context: .
      dockerfile: ./docker/ipam/Dockerfile
    environment:
      DB_CONNECT_STRING: postgresql://ipam[${COCKROACH_IP4}]:26257/ipam?sslcert=/etc/ssl/client.ifconfig.crt&sslkey=/etc/ssl/client.ifconfig.key&sslmode=verify-full&sslrootcert=/etc/ssl/crdb.ca.crt
    networks:
      netcrave-docker-driver-ipam:
        ipv4_address: ${IPAM_IP4}
        ipv6_address: ${IPAM_IP6}
    volumes:
      - /run/netcrave/docker/ifconfig
      - ipam_ssl:/etc/ssl
  ifconfig:
    depends_on:
        netcrave-docker-image:
            condition: service_completed_successfully        
    image: netcrave:ifconfig
    build:
      context: .
      dockerfile: ./docker/ifconfig/Dockerfile
    environment:
        IFCONFIG_DB_CONNECT_STRING: postgresql://ifconfig@[${COCKROACH_IP4}]:26257/ifconfig?sslcert=/etc/ssl/client.ifconfig.crt&sslkey=/etc/ssl/client.ifconfig.key&sslmode=verify-full&sslrootcert=/etc/ssl/crdb.ca.crt
    networks:
      netcrave-docker-driver-ifconfig:
        ipv4_address: ${IFCONFIG_IP4}
        ipv6_address: ${IFCONFIG_IP6}
    volumes:
      - /run/netcrave/docker/ifconfig
      - ifconfig_ssl:/etc/ssl
  haproxycfg:
    depends_on:
        netcrave-docker-image:
            condition: service_completed_successfully        
    image: netcrave:haproxycfg
    build:
      context: .
      dockerfile: ./docker/haproxycfg/Dockerfile
    networks:
      netcrave-docker-driver-haproxycfg:
        ipv4_address: ${HAPROXYCFG_IP4}
        ipv6_address: ${HAPROXYCFG_IP6}
    volumes:
        - haproxycfg_ssl:/etc/ssl
        - /srv/_netcrave/haproxy:/haproxy
  certificatemgr:
    depends_on:
        netcrave-docker-image:
            condition: service_completed_successfully        
    image: netcrave:certificatemgr
    build:
      context: .
      dockerfile: ./docker/certificatemgr/Dockerfile
    environment:
      DB_CONNECT_STRING: postgresql://certificatemgr@[2001:db8:aaaa:aabc:192:0:0:34]:26257/certificatemgr?sslcert=/etc/ssl/client.certificatemgr.crt&sslkey=/etc/ssl/client.certificatemgr.key&sslmode=verify-full&sslrootcert=/etc/ssl/crdb.ca.crt
    networks:
      netcrave-docker-driver-certificatemgr:
        ipv4_address: ${CERTIFICATEMGR_IP4}
        ipv6_address: ${CERTIFICATEMGR_IP6}
    volumes: 
        - certificatemgr_ssl:/etc/ssl
  dnsd:
    depends_on:
        netcrave-docker-image:
            condition: service_completed_successfully        
    image: netcrave:dnsd
    build:
      context: .
      dockerfile: ./docker/dnsd/Dockerfile
    networks:
      netcrave-docker-driver-dnsd:
        ipv4_address: ${DNSD_IP4}
        ipv6_address: ${DNSD_IP6}
    volumes:
        - dnsd_ssl:/etc/ssl
  icap:
    depends_on:
        netcrave-docker-image:
            condition: service_completed_successfully        
    image: netcrave:icap
    build:
      context: .
      dockerfile: ./docker/icap/Dockerfile
    networks:
      netcrave-docker-driver-icap:
        ipv4_address: ${ICAP_IP4}
        ipv6_address: ${ICAP_IP6}
    volumes:
        - icap_ssl:/etc/ssl
  haproxy:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:haproxy
    build:
      context: .
      args:
        TEMPLATE_ROOT: ./docker/haproxy/templates
      dockerfile: ./docker/haproxy/Dockerfile
    networks:
      netcrave-docker-driver-haproxy:
        ipv4_address: ${HAPROXY_IP4}
        ipv6_address: ${HAPROXY_IP6}
    volumes:
        - haproxy_ssl:/etc/ssl
        - /srv/_netcrave/haproxy/:/ctl_sock
  squid:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:squid
    build:
      context: .
      args:
        TEMPLATE_ROOT: ./docker/squid/templates
      dockerfile: ./docker/squid/Dockerfile
    networks:
      netcrave-docker-driver-squid:
        ipv4_address: ${SQUID_IP4}
        ipv6_address: ${SQUID_IP6}
    volumes: 
        - squid_ssl:/etc/ssl
  fluentd:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:fluentd
    build:
      context: .
      dockerfile: ./docker/fluentd/Dockerfile
      args:
        TEMPLATE_ROOT: ./docker/fluentd/templates
    networks:
      netcrave-docker-driver-fluentd:
        ipv4_address: ${FLUENTD_IP4}
        ipv6_address: ${FLUENTD_IP6}
    volumes:
        - fluent_ssl:/etc/ssl
  davfs:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:davfs
    build:
      context: .
      dockerfile: ./docker/davfs/Dockerfile
    networks:
      netcrave-docker-driver-davfs:
        ipv4_address: ${DAVFS_IP4}
        ipv6_address: ${DAVFS_IP6}
    volumes:
        - davfs_ssl:/etc/ssl
  acme:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:acme
    build:
      context: .
      dockerfile: ./docker/davfs/Dockerfile
    environment:
        HTTP_PROXY: http://[${SQUID_IP6}]:3128
        HTTPS_PROXY: http://[${SQUID_IP6}]:3128
    networks:
      netcrave-docker-driver-acme:
        ipv4_address: ${ACME_IP4}
        ipv6_address: ${ACME_IP6}
    volumes:
        - acme_ssl:/etc/ssl
  powerdns:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:powerdns
    build:
      context: .
      dockerfile: ./docker/powerdns/Dockerfile
      args:
        TEMPLATE_ROOT: ./docker/powerdns/templates
    networks:
      netcrave-docker-driver-powerdns:
        ipv4_address: ${POWERDNS_IP4}
        ipv6_address: ${POWERDNS_IP6}
    volumes:
        - powerdns_ssl:/etc/ssl
  frr-netcrave:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:frr
    build:
      context: .
      dockerfile: ./docker/frr/Dockerfile
      args:
        TEMPLATE_ROOT: ./docker/frr/templates
    network_mode: host
    privileged: true
    ipc: host
  frr-docker:
    depends_on:
        netcrave-image:
            condition: service_completed_successfully        
    image: netcrave:frr
    build:
      context: .
      dockerfile: ./docker/frr/Dockerfile
      args:
        TEMPLATE_ROOT: ./docker/haproxy/templates
    network_mode: host
    privileged: true
    ipc: host
    
networks:
  netcrave-docker-driver-ipam:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${IPAM_NET_4}
        - subnet: ${IPAM_NET_6}
  netcrave-docker-driver-ifconfig:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${IFCONFIG_NET_4}
        - subnet: ${IFCONFIG_NET_6}
  netcrave-docker-driver-haproxycfg:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${HAPROXYCFG_NET_4}
        - subnet: ${HAPROXYCFG_NET_6}
  netcrave-docker-driver-certificatemgr:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${CERTIFICATEMGR_NET_4}
        - subnet: ${CERTIFICATEMGR_NET_6}
  netcrave-docker-driver-dnsd:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${DNSD_NET_4}
        - subnet: ${DNSD_NET_6}
  netcrave-docker-driver-icap:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${ICAP_NET_4}
        - subnet: ${ICAP_NET_6}
  netcrave-docker-driver-haproxy:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${HAPROXY_NET_4}
        - subnet: ${HAPROXY_NET_6}
  netcrave-docker-driver-squid:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${SQUID_NET_4}
        - subnet: ${SQUID_NET_6}
  netcrave-docker-driver-cockroach:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${COCKROACH_NET_4}
        - subnet: ${COCKROACH_NET_6}
  netcrave-docker-driver-fluentd:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${FLUENTD_NET_4}
        - subnet: ${FLUENTD_NET_6}
  netcrave-docker-driver-davfs:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${DAVFS_NET_4}
        - subnet: ${DAVFS_NET_6}
  netcrave-docker-driver-acme:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${ACME_NET_4}
        - subnet: ${ACME_NET_6}
  netcrave-docker-driver-powerdns:
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${POWERDNS_NET_4}
        - subnet: ${POWERDNS_NET_6}
volumes:
    ca_easyrsa:
    certificatemgr_ssl:
    davfs_ssl:
    haproxy_ssl:
    acme_ssl:
    dnsd_ssl:
    squid_ssl:
    crdb_ssl:
    crdb:
    crdb_ca_key:
    crdb_ca_easyrsa:
    fluent_ssl:
    icap_ssl:
    haproxycfg_ssl:
    ipam_ssl:
    ifconfig_ssl:
    powerdns_ssl:
